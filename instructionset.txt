mem[X]  R,W     value in memory at index X
rA      R,W     value at active register A
rB      R       value at active register B
immed   R       immediate value
pc      W       program counter

NOTE: All instructions except hlttint and jmp unconditionally increment the
    program counter, this operation is not shown in the pseudocode.

0x0     hlttint     while (true) ;          Hangs the processor
0x1     ld.imm      rA = immed              Load immed to rA
0x2     ld.mem      rA = mem[rB]            Load mem[rB] to rA

0x3     str         mem[rA] = rB            Store rA to mem[rB]
0x4     cpy         rA = rB                 Copies rA to rB

0x5     add         rA = rA + rB            Adds rB to rA
0x6     sub         rA = rA - rB            Subtracts rB from rA
0x7     mul         rA = rA * rB            Multiplies rA by rB
0x8     lsl         rA = rA << rB           Logically shift rA left by rB
0x9     lsr         rA = rA >> rB           Logically shift rA right by rB
0xA     and         rA = rA & rB            Perform bitwise-and on rA and rB, store result in rA
0xB     or          rA = rA | rB            Perform bitwise-or on rA and rB, store result in rA
0xC     xor         rA = rA ^ rB            Perform bitwise-xor on rA and rB, store result in rA

0xD     jmp         pc = rA                 Unconditionally jump to rA
0xE     skpc        if (carry) pc += 1      Skips the next instruction if carry flag is set
0xF
